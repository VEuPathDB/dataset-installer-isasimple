package GUS::Model::Core::TableInfo_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::GusRow;

use vars qw (@ISA);
@ISA = qw (GUS::Model::GusRow);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(1);
  $self->setUpdateable(1);
}

sub setTableId {
  my($self,$value) = @_;
  $self->set("table_id",$value);
}

sub getTableId {
    my($self) = @_;
  return $self->get("table_id");
}

sub setName {
  my($self,$value) = @_;
  $self->set("name",$value);
}

sub getName {
    my($self) = @_;
  return $self->get("name");
}

sub setTableType {
  my($self,$value) = @_;
  $self->set("table_type",$value);
}

sub getTableType {
    my($self) = @_;
  return $self->get("table_type");
}

sub setPrimaryKeyColumn {
  my($self,$value) = @_;
  $self->set("primary_key_column",$value);
}

sub getPrimaryKeyColumn {
    my($self) = @_;
  return $self->get("primary_key_column");
}

sub setDatabaseId {
  my($self,$value) = @_;
  $self->set("database_id",$value);
}

sub getDatabaseId {
    my($self) = @_;
  return $self->get("database_id");
}

sub setIsVersioned {
  my($self,$value) = @_;
  $self->set("is_versioned",$value);
}

sub getIsVersioned {
    my($self) = @_;
  return $self->get("is_versioned");
}

sub setIsView {
  my($self,$value) = @_;
  $self->set("is_view",$value);
}

sub getIsView {
    my($self) = @_;
  return $self->get("is_view");
}

sub setViewOnTableId {
  my($self,$value) = @_;
  $self->set("view_on_table_id",$value);
}

sub getViewOnTableId {
    my($self) = @_;
  return $self->get("view_on_table_id");
}

sub setSuperclassTableId {
  my($self,$value) = @_;
  $self->set("superclass_table_id",$value);
}

sub getSuperclassTableId {
    my($self) = @_;
  return $self->get("superclass_table_id");
}

sub setIsUpdatable {
  my($self,$value) = @_;
  $self->set("is_updatable",$value);
}

sub getIsUpdatable {
    my($self) = @_;
  return $self->get("is_updatable");
}

sub setModificationDate {
  my($self,$value) = @_;
  $self->set("modification_date",$value);
}

sub getModificationDate {
    my($self) = @_;
  return $self->get("modification_date");
}

sub setUserRead {
  my($self,$value) = @_;
  $self->set("user_read",$value);
}

sub getUserRead {
    my($self) = @_;
  return $self->get("user_read");
}

sub setUserWrite {
  my($self,$value) = @_;
  $self->set("user_write",$value);
}

sub getUserWrite {
    my($self) = @_;
  return $self->get("user_write");
}

sub setGroupRead {
  my($self,$value) = @_;
  $self->set("group_read",$value);
}

sub getGroupRead {
    my($self) = @_;
  return $self->get("group_read");
}

sub setGroupWrite {
  my($self,$value) = @_;
  $self->set("group_write",$value);
}

sub getGroupWrite {
    my($self) = @_;
  return $self->get("group_write");
}

sub setOtherRead {
  my($self,$value) = @_;
  $self->set("other_read",$value);
}

sub getOtherRead {
    my($self) = @_;
  return $self->get("other_read");
}

sub setOtherWrite {
  my($self,$value) = @_;
  $self->set("other_write",$value);
}

sub getOtherWrite {
    my($self) = @_;
  return $self->get("other_write");
}

sub setRowUserId {
  my($self,$value) = @_;
  $self->set("row_user_id",$value);
}

sub getRowUserId {
    my($self) = @_;
  return $self->get("row_user_id");
}

sub setRowGroupId {
  my($self,$value) = @_;
  $self->set("row_group_id",$value);
}

sub getRowGroupId {
    my($self) = @_;
  return $self->get("row_group_id");
}

sub setRowProjectId {
  my($self,$value) = @_;
  $self->set("row_project_id",$value);
}

sub getRowProjectId {
    my($self) = @_;
  return $self->get("row_project_id");
}

sub setRowAlgInvocationId {
  my($self,$value) = @_;
  $self->set("row_alg_invocation_id",$value);
}

sub getRowAlgInvocationId {
    my($self) = @_;
  return $self->get("row_alg_invocation_id");
}

1;
