package GUS::Model::EDA::AttributeGraph_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::GusRow;

use vars qw (@ISA);
@ISA = qw (GUS::Model::GusRow);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(0);
  $self->setUpdateable(1);
}

sub setAttributeGraphId {
  my($self,$value) = @_;
  $self->set("attribute_graph_id",$value);
}

sub getAttributeGraphId {
    my($self) = @_;
  return $self->get("attribute_graph_id");
}

sub setStudyId {
  my($self,$value) = @_;
  $self->set("study_id",$value);
}

sub getStudyId {
    my($self) = @_;
  return $self->get("study_id");
}

sub setOntologyTermId {
  my($self,$value) = @_;
  $self->set("ontology_term_id",$value);
}

sub getOntologyTermId {
    my($self) = @_;
  return $self->get("ontology_term_id");
}

sub setStableId {
  my($self,$value) = @_;
  $self->set("stable_id",$value);
}

sub getStableId {
    my($self) = @_;
  return $self->get("stable_id");
}

sub setParentStableId {
  my($self,$value) = @_;
  $self->set("parent_stable_id",$value);
}

sub getParentStableId {
    my($self) = @_;
  return $self->get("parent_stable_id");
}

sub setParentOntologyTermId {
  my($self,$value) = @_;
  $self->set("parent_ontology_term_id",$value);
}

sub getParentOntologyTermId {
    my($self) = @_;
  return $self->get("parent_ontology_term_id");
}

sub setProviderLabel {
  my($self,$value) = @_;
  $self->set("provider_label",$value);
}

sub getProviderLabel {
    my($self) = @_;
  return $self->get("provider_label");
}

sub setDisplayName {
  my($self,$value) = @_;
  $self->set("display_name",$value);
}

sub getDisplayName {
    my($self) = @_;
  return $self->get("display_name");
}

sub setDisplayOrder {
  my($self,$value) = @_;
  $self->set("display_order",$value);
}

sub getDisplayOrder {
    my($self) = @_;
  return $self->get("display_order");
}

sub setDefinition {
  my($self,$value) = @_;
  $self->set("definition",$value);
}

sub getDefinition {
    my($self) = @_;
  return $self->get("definition");
}

sub setDisplayType {
  my($self,$value) = @_;
  $self->set("display_type",$value);
}

sub getDisplayType {
    my($self) = @_;
  return $self->get("display_type");
}

sub setScope {
  my($self,$value) = @_;
  $self->set("scope",$value);
}

sub getScope {
    my($self) = @_;
  return $self->get("scope");
}

sub setDisplayRangeMin {
  my($self,$value) = @_;
  $self->set("display_range_min",$value);
}

sub getDisplayRangeMin {
    my($self) = @_;
  return $self->get("display_range_min");
}

sub setDisplayRangeMax {
  my($self,$value) = @_;
  $self->set("display_range_max",$value);
}

sub getDisplayRangeMax {
    my($self) = @_;
  return $self->get("display_range_max");
}

sub setIsMergeKey {
  my($self,$value) = @_;
  $self->set("is_merge_key",$value);
}

sub getIsMergeKey {
    my($self) = @_;
  return $self->get("is_merge_key");
}

sub setIsRepeated {
  my($self,$value) = @_;
  $self->set("is_repeated",$value);
}

sub getIsRepeated {
    my($self) = @_;
  return $self->get("is_repeated");
}

sub setBinWidthOverride {
  my($self,$value) = @_;
  $self->set("bin_width_override",$value);
}

sub getBinWidthOverride {
    my($self) = @_;
  return $self->get("bin_width_override");
}

sub setIsTemporal {
  my($self,$value) = @_;
  $self->set("is_temporal",$value);
}

sub getIsTemporal {
    my($self) = @_;
  return $self->get("is_temporal");
}

sub setIsFeatured {
  my($self,$value) = @_;
  $self->set("is_featured",$value);
}

sub getIsFeatured {
    my($self) = @_;
  return $self->get("is_featured");
}

sub setOrdinalValues {
  my($self,$value) = @_;
  $self->set("ordinal_values",$value);
}

sub getOrdinalValues {
    my($self) = @_;
  return $self->get("ordinal_values");
}

sub setModificationDate {
  my($self,$value) = @_;
  $self->set("modification_date",$value);
}

sub getModificationDate {
    my($self) = @_;
  return $self->get("modification_date");
}

sub setUserRead {
  my($self,$value) = @_;
  $self->set("user_read",$value);
}

sub getUserRead {
    my($self) = @_;
  return $self->get("user_read");
}

sub setUserWrite {
  my($self,$value) = @_;
  $self->set("user_write",$value);
}

sub getUserWrite {
    my($self) = @_;
  return $self->get("user_write");
}

sub setGroupRead {
  my($self,$value) = @_;
  $self->set("group_read",$value);
}

sub getGroupRead {
    my($self) = @_;
  return $self->get("group_read");
}

sub setGroupWrite {
  my($self,$value) = @_;
  $self->set("group_write",$value);
}

sub getGroupWrite {
    my($self) = @_;
  return $self->get("group_write");
}

sub setOtherRead {
  my($self,$value) = @_;
  $self->set("other_read",$value);
}

sub getOtherRead {
    my($self) = @_;
  return $self->get("other_read");
}

sub setOtherWrite {
  my($self,$value) = @_;
  $self->set("other_write",$value);
}

sub getOtherWrite {
    my($self) = @_;
  return $self->get("other_write");
}

sub setRowUserId {
  my($self,$value) = @_;
  $self->set("row_user_id",$value);
}

sub getRowUserId {
    my($self) = @_;
  return $self->get("row_user_id");
}

sub setRowGroupId {
  my($self,$value) = @_;
  $self->set("row_group_id",$value);
}

sub getRowGroupId {
    my($self) = @_;
  return $self->get("row_group_id");
}

sub setRowProjectId {
  my($self,$value) = @_;
  $self->set("row_project_id",$value);
}

sub getRowProjectId {
    my($self) = @_;
  return $self->get("row_project_id");
}

sub setRowAlgInvocationId {
  my($self,$value) = @_;
  $self->set("row_alg_invocation_id",$value);
}

sub getRowAlgInvocationId {
    my($self) = @_;
  return $self->get("row_alg_invocation_id");
}

1;
