package GUS::Model::SRes::OntologyTerm_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::GusRow;

use vars qw (@ISA);
@ISA = qw (GUS::Model::GusRow);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(1);
  $self->setUpdateable(1);
}

sub setOntologyTermId {
  my($self,$value) = @_;
  $self->set("ontology_term_id",$value);
}

sub getOntologyTermId {
    my($self) = @_;
  return $self->get("ontology_term_id");
}

sub setOntologyTermTypeId {
  my($self,$value) = @_;
  $self->set("ontology_term_type_id",$value);
}

sub getOntologyTermTypeId {
    my($self) = @_;
  return $self->get("ontology_term_type_id");
}

sub setName {
  my($self,$value) = @_;
  $self->set("name",$value);
}

sub getName {
    my($self) = @_;
  return $self->get("name");
}

sub setDefinition {
  my($self,$value) = @_;
  $self->set("definition",$value);
}

sub getDefinition {
    my($self) = @_;
  return $self->get("definition");
}

sub setExternalDatabaseReleaseId {
  my($self,$value) = @_;
  $self->set("external_database_release_id",$value);
}

sub getExternalDatabaseReleaseId {
    my($self) = @_;
  return $self->get("external_database_release_id");
}

sub setSourceId {
  my($self,$value) = @_;
  $self->set("source_id",$value);
}

sub getSourceId {
    my($self) = @_;
  return $self->get("source_id");
}

sub setCategory {
  my($self,$value) = @_;
  $self->set("category",$value);
}

sub getCategory {
    my($self) = @_;
  return $self->get("category");
}

sub setAncestorTermId {
  my($self,$value) = @_;
  $self->set("ancestor_term_id",$value);
}

sub getAncestorTermId {
    my($self) = @_;
  return $self->get("ancestor_term_id");
}

sub setIsUserDefined {
  my($self,$value) = @_;
  $self->set("is_user_defined",$value);
}

sub getIsUserDefined {
    my($self) = @_;
  return $self->get("is_user_defined");
}

sub setUri {
  my($self,$value) = @_;
  $self->set("uri",$value);
}

sub getUri {
    my($self) = @_;
  return $self->get("uri");
}

sub setIsObsolete {
  my($self,$value) = @_;
  $self->set("is_obsolete",$value);
}

sub getIsObsolete {
    my($self) = @_;
  return $self->get("is_obsolete");
}

sub setTaxonId {
  my($self,$value) = @_;
  $self->set("taxon_id",$value);
}

sub getTaxonId {
    my($self) = @_;
  return $self->get("taxon_id");
}

sub setNotes {
  my($self,$value) = @_;
  $self->set("notes",$value);
}

sub getNotes {
    my($self) = @_;
  return $self->get("notes");
}

sub setMinimumLevel {
  my($self,$value) = @_;
  $self->set("minimum_level",$value);
}

sub getMinimumLevel {
    my($self) = @_;
  return $self->get("minimum_level");
}

sub setMaximumLevel {
  my($self,$value) = @_;
  $self->set("maximum_level",$value);
}

sub getMaximumLevel {
    my($self) = @_;
  return $self->get("maximum_level");
}

sub setNumberOfLevels {
  my($self,$value) = @_;
  $self->set("number_of_levels",$value);
}

sub getNumberOfLevels {
    my($self) = @_;
  return $self->get("number_of_levels");
}

sub setModificationDate {
  my($self,$value) = @_;
  $self->set("modification_date",$value);
}

sub getModificationDate {
    my($self) = @_;
  return $self->get("modification_date");
}

sub setUserRead {
  my($self,$value) = @_;
  $self->set("user_read",$value);
}

sub getUserRead {
    my($self) = @_;
  return $self->get("user_read");
}

sub setUserWrite {
  my($self,$value) = @_;
  $self->set("user_write",$value);
}

sub getUserWrite {
    my($self) = @_;
  return $self->get("user_write");
}

sub setGroupRead {
  my($self,$value) = @_;
  $self->set("group_read",$value);
}

sub getGroupRead {
    my($self) = @_;
  return $self->get("group_read");
}

sub setGroupWrite {
  my($self,$value) = @_;
  $self->set("group_write",$value);
}

sub getGroupWrite {
    my($self) = @_;
  return $self->get("group_write");
}

sub setOtherRead {
  my($self,$value) = @_;
  $self->set("other_read",$value);
}

sub getOtherRead {
    my($self) = @_;
  return $self->get("other_read");
}

sub setOtherWrite {
  my($self,$value) = @_;
  $self->set("other_write",$value);
}

sub getOtherWrite {
    my($self) = @_;
  return $self->get("other_write");
}

sub setRowUserId {
  my($self,$value) = @_;
  $self->set("row_user_id",$value);
}

sub getRowUserId {
    my($self) = @_;
  return $self->get("row_user_id");
}

sub setRowGroupId {
  my($self,$value) = @_;
  $self->set("row_group_id",$value);
}

sub getRowGroupId {
    my($self) = @_;
  return $self->get("row_group_id");
}

sub setRowProjectId {
  my($self,$value) = @_;
  $self->set("row_project_id",$value);
}

sub getRowProjectId {
    my($self) = @_;
  return $self->get("row_project_id");
}

sub setRowAlgInvocationId {
  my($self,$value) = @_;
  $self->set("row_alg_invocation_id",$value);
}

sub getRowAlgInvocationId {
    my($self) = @_;
  return $self->get("row_alg_invocation_id");
}

1;
