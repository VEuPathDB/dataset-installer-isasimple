package GUS::Model::EDA_UD::Attribute_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::GusRow;

use vars qw (@ISA);
@ISA = qw (GUS::Model::GusRow);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(0);
  $self->setUpdateable(1);
}

sub setAttributeId {
  my($self,$value) = @_;
  $self->set("attribute_id",$value);
}

sub getAttributeId {
    my($self) = @_;
  return $self->get("attribute_id");
}

sub setEntityTypeId {
  my($self,$value) = @_;
  $self->set("entity_type_id",$value);
}

sub getEntityTypeId {
    my($self) = @_;
  return $self->get("entity_type_id");
}

sub setEntityTypeStableId {
  my($self,$value) = @_;
  $self->set("entity_type_stable_id",$value);
}

sub getEntityTypeStableId {
    my($self) = @_;
  return $self->get("entity_type_stable_id");
}

sub setProcessTypeId {
  my($self,$value) = @_;
  $self->set("process_type_id",$value);
}

sub getProcessTypeId {
    my($self) = @_;
  return $self->get("process_type_id");
}

sub setOntologyTermId {
  my($self,$value) = @_;
  $self->set("ontology_term_id",$value);
}

sub getOntologyTermId {
    my($self) = @_;
  return $self->get("ontology_term_id");
}

sub setParentOntologyTermId {
  my($self,$value) = @_;
  $self->set("parent_ontology_term_id",$value);
}

sub getParentOntologyTermId {
    my($self) = @_;
  return $self->get("parent_ontology_term_id");
}

sub setStableId {
  my($self,$value) = @_;
  $self->set("stable_id",$value);
}

sub getStableId {
    my($self) = @_;
  return $self->get("stable_id");
}

sub setDisplayName {
  my($self,$value) = @_;
  $self->set("display_name",$value);
}

sub getDisplayName {
    my($self) = @_;
  return $self->get("display_name");
}

sub setDataType {
  my($self,$value) = @_;
  $self->set("data_type",$value);
}

sub getDataType {
    my($self) = @_;
  return $self->get("data_type");
}

sub setDistinctValuesCount {
  my($self,$value) = @_;
  $self->set("distinct_values_count",$value);
}

sub getDistinctValuesCount {
    my($self) = @_;
  return $self->get("distinct_values_count");
}

sub setIsMultiValued {
  my($self,$value) = @_;
  $self->set("is_multi_valued",$value);
}

sub getIsMultiValued {
    my($self) = @_;
  return $self->get("is_multi_valued");
}

sub setDataShape {
  my($self,$value) = @_;
  $self->set("data_shape",$value);
}

sub getDataShape {
    my($self) = @_;
  return $self->get("data_shape");
}

sub setUnit {
  my($self,$value) = @_;
  $self->set("unit",$value);
}

sub getUnit {
    my($self) = @_;
  return $self->get("unit");
}

sub setUnitOntologyTermId {
  my($self,$value) = @_;
  $self->set("unit_ontology_term_id",$value);
}

sub getUnitOntologyTermId {
    my($self) = @_;
  return $self->get("unit_ontology_term_id");
}

sub setPrecision {
  my($self,$value) = @_;
  $self->set("precision",$value);
}

sub getPrecision {
    my($self) = @_;
  return $self->get("precision");
}

sub setOrderedValues {
  my($self,$value) = @_;
  $self->set("ordered_values",$value);
}

sub getOrderedValues {
    my($self) = @_;
  return $self->get("ordered_values");
}

sub setRangeMin {
  my($self,$value) = @_;
  $self->set("range_min",$value);
}

sub getRangeMin {
    my($self) = @_;
  return $self->get("range_min");
}

sub setRangeMax {
  my($self,$value) = @_;
  $self->set("range_max",$value);
}

sub getRangeMax {
    my($self) = @_;
  return $self->get("range_max");
}

sub setBinWidth {
  my($self,$value) = @_;
  $self->set("bin_width",$value);
}

sub getBinWidth {
    my($self) = @_;
  return $self->get("bin_width");
}

sub setMean {
  my($self,$value) = @_;
  $self->set("mean",$value);
}

sub getMean {
    my($self) = @_;
  return $self->get("mean");
}

sub setMedian {
  my($self,$value) = @_;
  $self->set("median",$value);
}

sub getMedian {
    my($self) = @_;
  return $self->get("median");
}

sub setLowerQuartile {
  my($self,$value) = @_;
  $self->set("lower_quartile",$value);
}

sub getLowerQuartile {
    my($self) = @_;
  return $self->get("lower_quartile");
}

sub setUpperQuartile {
  my($self,$value) = @_;
  $self->set("upper_quartile",$value);
}

sub getUpperQuartile {
    my($self) = @_;
  return $self->get("upper_quartile");
}

sub setModificationDate {
  my($self,$value) = @_;
  $self->set("modification_date",$value);
}

sub getModificationDate {
    my($self) = @_;
  return $self->get("modification_date");
}

sub setUserRead {
  my($self,$value) = @_;
  $self->set("user_read",$value);
}

sub getUserRead {
    my($self) = @_;
  return $self->get("user_read");
}

sub setUserWrite {
  my($self,$value) = @_;
  $self->set("user_write",$value);
}

sub getUserWrite {
    my($self) = @_;
  return $self->get("user_write");
}

sub setGroupRead {
  my($self,$value) = @_;
  $self->set("group_read",$value);
}

sub getGroupRead {
    my($self) = @_;
  return $self->get("group_read");
}

sub setGroupWrite {
  my($self,$value) = @_;
  $self->set("group_write",$value);
}

sub getGroupWrite {
    my($self) = @_;
  return $self->get("group_write");
}

sub setOtherRead {
  my($self,$value) = @_;
  $self->set("other_read",$value);
}

sub getOtherRead {
    my($self) = @_;
  return $self->get("other_read");
}

sub setOtherWrite {
  my($self,$value) = @_;
  $self->set("other_write",$value);
}

sub getOtherWrite {
    my($self) = @_;
  return $self->get("other_write");
}

sub setRowUserId {
  my($self,$value) = @_;
  $self->set("row_user_id",$value);
}

sub getRowUserId {
    my($self) = @_;
  return $self->get("row_user_id");
}

sub setRowGroupId {
  my($self,$value) = @_;
  $self->set("row_group_id",$value);
}

sub getRowGroupId {
    my($self) = @_;
  return $self->get("row_group_id");
}

sub setRowProjectId {
  my($self,$value) = @_;
  $self->set("row_project_id",$value);
}

sub getRowProjectId {
    my($self) = @_;
  return $self->get("row_project_id");
}

sub setRowAlgInvocationId {
  my($self,$value) = @_;
  $self->set("row_alg_invocation_id",$value);
}

sub getRowAlgInvocationId {
    my($self) = @_;
  return $self->get("row_alg_invocation_id");
}

1;
